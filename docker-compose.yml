version: '3.9'

volumes:
  postgres_data:
  redis_data:

networks:
  mini-market-network:
    driver: bridge

services:
  # API Gateway (Go)
  gateway:
    container_name: gateway
    build: ./gateway
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - USER_SERVICE_URL=http://user-service:5000
      - PRODUCT_SERVICE_URL=http://product-service:8000
      - INVENTORY_SERVICE_URL=http://inventory-service:5000
      - ORDER_SERVICE_URL=http://order-service:5000
      - PAYMENT_SERVICE_URL=http://payment-service:8000
      - CART_SERVICE_URL=http://cart-service:5000
      - REVIEW_SERVICE_URL=http://review-service:8000
      - ANALYTICS_SERVICE_URL=http://analytics-service:5000
      - JWT_SECRET_KEY=super-secret-jwt-key-change-in-production
    networks:
      - mini-market-network

  # База данных PostgreSQL
  database:
    container_name: database
    build: ./database
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mini_market
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mini_market"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - mini-market-network

  # Веб-интерфейс
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - gateway
    environment:
      - VITE_GATEWAY_URL=http://gateway:8080
    networks:
      - mini-market-network

  # Redis для кэширования
  redis:
    image: redis:6-alpine
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - mini-market-network

  # Kafka + Zookeeper для обмена сообщениями
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mini-market-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    networks:
      - mini-market-network

  # Сервис пользователей (Python)
  user-service:
    build: ./microservices/user-service
    expose:
      - "5000"
    environment:
      - DATABASE_URI=postgresql://user:password@database:5432/mini_market
      - JWT_SECRET_KEY=super-secret-jwt-key-change-in-production
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      database:
        condition: service_healthy
    networks:
      - mini-market-network

  # Сервис товаров (Go)
  product-service:
    build: ./microservices/product-service
    expose:
      - "8000"
    environment:
      - DATABASE_URI=postgresql://user:password@database:5432/mini_market?sslmode=disable
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - mini-market-network

  # Сервис инвентаря (Python)
  inventory-service:
    build: ./microservices/inventory-service
    expose:
      - "5000"
    environment:
      - DATABASE_URI=postgresql://user:password@database:5432/mini_market
      - REDIS_URL=redis://redis:6379/2
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - mini-market-network

  # Сервис заказов (Go)
  order-service:
    build: ./microservices/order-service
    expose:
      - "8000"
    environment:
      - DATABASE_URI=postgresql://user:password@database:5432/mini_market?sslmode=disable
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - USER_SERVICE_URL=http://user-service:5000
      - INVENTORY_SERVICE_URL=http://inventory-service:5000
      - PAYMENT_SERVICE_URL=http://payment-service:5000
    depends_on:
      database:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - mini-market-network

  # Сервис платежей (Python)
  payment-service:
    build: ./microservices/payment-service
    expose:
      - "5000"
    environment:
      - DATABASE_URL=postgresql://user:password@database:5432/mini_market
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      database:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - mini-market-network

  # Сервис уведомлений (Go)
  notification-service:
    build: ./microservices/notification-service
    expose:
      - "8000"
    environment:
      - PORT=8080
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
    depends_on:
      kafka:
        condition: service_started
    networks:
      - mini-market-network

  # Сервис корзины (Python)
  cart-service:
    build: ./microservices/cart-service
    expose:
      - "5000"
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=mini_market
      - DB_USER=user
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/3
      - PRODUCT_SERVICE_URL=http://product-service:8000
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - mini-market-network

  # Сервис отзывов (Go)
  review-service:
    build: ./microservices/review-service
    expose:
      - "8000"
    environment:
      - DATABASE_URI=postgresql://user:password@database:5432/mini_market?sslmode=disable
      - USER_SERVICE_URL=http://user-service:5000
      - PRODUCT_SERVICE_URL=http://product-service:8000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - mini-market-network

  # Сервис аналитики (Python)
  analytics-service:
    build: ./microservices/analytics-service
    expose:
      - "5000"
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=mini_market
      - DB_USER=user
      - DB_PASSWORD=password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379/4
    depends_on:
      database:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - mini-market-network

